Disable simdjson's fast path to save over 10 KiB of binary size.

--- a/vendor/simdjson/include/simdjson/generic/numberparsing.h
+++ b/vendor/simdjson/include/simdjson/generic/numberparsing.h
@@ -53,6 +53,12 @@ simdjson_really_inline double to_double(uint64_t mantissa, uint64_t real_exponen
 // We assume that power is in the [smallest_power,
 // largest_power] interval: the caller is responsible for this check.
 simdjson_really_inline bool compute_float_64(int64_t power, uint64_t i, bool negative, double &d) {
+  (void)power;
+  (void)i;
+  (void)negative;
+  (void)d;
+  return false;
+#if 0
   // we start with a fast path
   // It was described in
   // Clinger WD. How to read floating point numbers accurately.
@@ -294,6 +300,7 @@ simdjson_really_inline bool compute_float_64(int64_t power, uint64_t i, bool neg
   }
   d = to_double(mantissa, real_exponent, negative);
   return true;
+#endif
 }

 // We call a fallback floating-point parser that might be slow. Note
