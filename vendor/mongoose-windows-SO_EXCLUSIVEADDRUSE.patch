https://github.com/cesanta/mongoose/pull/2124

Author: Matthew "strager" Glazar <strager.nds@gmail.com>
Date:   Thu Mar 16 19:10:07 2023 -0700

    Use SO_EXCLUSIVEADDRUSE on Windows, as intended

    Commit 31ce2195 introduced a bug causing both SO_REUSEADDR and
    SO_EXCLUSIVEADDRUSE to be used on Windows. This is invalid.

    Commit d5993ba2 tried to fix this bug. However, the fix was incorrect.
    The correct fix was to use SO_EXCLUSIVEADDRUSE and not use SO_REUSEADDR.
    Instead, commit d5993ba2 disabled SO_EXCLUSIVEADDRUSE and kept
    SO_REUSEADDR.

    In this patch, fix the mistakes of both commits 31ce2195 and d5993ba2:

    * On Windows, use SO_EXCLUSIVEADDRUSE if available.
    * On Windows, never use SO_REUSEADDR.

    Refs: 31ce219544c81b387a506dbb2118c6865edc71e6
    Refs: d5993ba27ece4b406c230eca63b76dd5d2c28a2d

diff --git a/src/sock.c b/src/sock.c
index aaf58ca9..fba4d648 100644
--- a/src/sock.c
+++ b/src/sock.c
@@ -192,28 +192,28 @@ bool mg_open_listener(struct mg_connection *c, const char *url) {

     if ((fd = socket(af, type, proto)) == MG_INVALID_SOCKET) {
       MG_ERROR(("socket: %d", MG_SOCK_ERR(-1)));
-#if ((MG_ARCH == MG_ARCH_WIN32) || (MG_ARCH == MG_ARCH_UNIX) || \
-     (defined(LWIP_SOCKET) && SO_REUSE == 1))
+#if MG_ARCH == MG_ARCH_WIN32
+      // SO_REUSEADDR is not enabled on Windows because the semantics of
+      // SO_REUSEADDR on UNIX and Windows is different. On Windows,
+      // SO_REUSEADDR allows to bind a socket to a port without error even
+      // if the port is already open by another program. This is not the
+      // behavior SO_REUSEADDR was designed for, and leads to hard-to-track
+      // failure scenarios. Therefore, SO_REUSEADDR is disabled on Windows.
+      // SO_EXCLUSIVEADDRUSE is used on Windows instead if supported.
+#if defined(SO_EXCLUSIVEADDRUSE) && !defined(WINCE)
+    } else if ((rc = setsockopt(fd, SOL_SOCKET, SO_EXCLUSIVEADDRUSE,
+                                (char *) &on, sizeof(on))) != 0) {
+      // Use SO_EXCLUSIVEADDRUSE instead of SO_REUSEADDR.
+      MG_ERROR(("exclusiveaddruse: %d", MG_SOCK_ERR(rc)));
+#endif
+#elif (MG_ARCH == MG_ARCH_UNIX) || (defined(LWIP_SOCKET) && SO_REUSE == 1)
     } else if ((rc = setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (char *) &on,
                                 sizeof(on))) != 0) {
-      // 1. SO_RESUSEADDR is not enabled on Windows because the semantics of
-      //    SO_REUSEADDR on UNIX and Windows is different. On Windows,
-      //    SO_REUSEADDR allows to bind a socket to a port without error even
-      //    if the port is already open by another program. This is not the
-      //    behavior SO_REUSEADDR was designed for, and leads to hard-to-track
-      //    failure scenarios. Therefore, SO_REUSEADDR was disabled on Windows
-      //    unless SO_EXCLUSIVEADDRUSE is supported and set on a socket.
-      // 2. In case of LWIP, SO_REUSEADDR should be explicitly enabled, by
+      // In case of LWIP, SO_REUSEADDR should be explicitly enabled, by
       // defining
       //    SO_REUSE (in lwipopts.h), otherwise the code below will compile
       //    but won't work! (setsockopt will return EINVAL)
       MG_ERROR(("reuseaddr: %d", MG_SOCK_ERR(rc)));
-#endif
-#if MG_ARCH == MG_ARCH_WIN32 && !defined(SO_EXCLUSIVEADDRUSE) && !defined(WINCE)
-    } else if ((rc = setsockopt(fd, SOL_SOCKET, SO_EXCLUSIVEADDRUSE,
-                                (char *) &on, sizeof(on))) != 0) {
-      // "Using SO_REUSEADDR and SO_EXCLUSIVEADDRUSE"
-      MG_ERROR(("exclusiveaddruse: %d", MG_SOCK_ERR(rc)));
 #endif
     } else if ((rc = bind(fd, &usa.sa, slen)) != 0) {
       MG_ERROR(("bind: %d", MG_SOCK_ERR(rc)));
