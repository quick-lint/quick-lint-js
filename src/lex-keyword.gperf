%compare-strncmp
%define class-name lexer_keyword
%define initializer-suffix ,static_cast<token_type>(0)
%define lookup-function-name look_up
%define slot-name string_offset
%enum
%language=C++
%pic
%readonly-tables
%struct-type

%{
// Copyright (C) 2020  Matthew "strager" Glazar
// See end of file for extended copyright information.

#include <quick-lint-js/char8.h>
#include <quick-lint-js/lex.h>
#include <quick-lint-js/token.h>
#include <quick-lint-js/warning.h>
#include <stddef.h>
#include <string.h>

QLJS_WARNING_IGNORE_CLANG("-Wold-style-cast")
QLJS_WARNING_IGNORE_CLANG("-Wshorten-64-to-32")
QLJS_WARNING_IGNORE_CLANG("-Wzero-as-null-pointer-constant")
QLJS_WARNING_IGNORE_GCC("-Wconversion")
QLJS_WARNING_IGNORE_GCC("-Wold-style-cast")
QLJS_WARNING_IGNORE_GCC("-Wzero-as-null-pointer-constant")
QLJS_WARNING_IGNORE_MSVC(4267)  // Conversion from 'size_t' to 'unsigned int'.

namespace quick_lint_js {
namespace {
%}
struct keyword_entry {
  int string_offset;
  token_type type;
};

%%
as,         token_type::kw_as
async,      token_type::kw_async
await,      token_type::kw_await
break,      token_type::kw_break
case,       token_type::kw_case
catch,      token_type::kw_catch
class,      token_type::kw_class
const,      token_type::kw_const
continue,   token_type::kw_continue
debugger,   token_type::kw_debugger
default,    token_type::kw_default
delete,     token_type::kw_delete
do,         token_type::kw_do
else,       token_type::kw_else
enum,       token_type::kw_enum
export,     token_type::kw_export
extends,    token_type::kw_extends
false,      token_type::kw_false
finally,    token_type::kw_finally
for,        token_type::kw_for
from,       token_type::kw_from
function,   token_type::kw_function
get,        token_type::kw_get
if,         token_type::kw_if
import,     token_type::kw_import
in,         token_type::kw_in
instanceof, token_type::kw_instanceof
let,        token_type::kw_let
new,        token_type::kw_new
null,       token_type::kw_null
of,         token_type::kw_of
return,     token_type::kw_return
set,        token_type::kw_set
static,     token_type::kw_static
super,      token_type::kw_super
switch,     token_type::kw_switch
this,       token_type::kw_this
throw,      token_type::kw_throw
true,       token_type::kw_true
try,        token_type::kw_try
typeof,     token_type::kw_typeof
var,        token_type::kw_var
void,       token_type::kw_void
while,      token_type::kw_while
with,       token_type::kw_with
yield,      token_type::kw_yield
%%
}

QLJS_WARNING_PUSH
QLJS_WARNING_IGNORE_GCC("-Wuseless-cast")
token_type lexer::identifier_token_type(string8_view identifier) noexcept {
  const keyword_entry *entry = lexer_keyword::look_up(
      reinterpret_cast<const char *>(identifier.data()), identifier.size());
  if (entry) {
    return entry->type;
  } else {
    return token_type::identifier;
  }
}
QLJS_WARNING_POP
}

// quick-lint-js finds bugs in JavaScript programs.
// Copyright (C) 2020  Matthew "strager" Glazar
//
// This file is part of quick-lint-js.
//
// quick-lint-js is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// quick-lint-js is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with quick-lint-js.  If not, see <https://www.gnu.org/licenses/>.
